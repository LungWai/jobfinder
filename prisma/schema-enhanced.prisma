// This is your enhanced Prisma schema file for job application management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============ EXISTING MODELS (ENHANCED) ============

model JobListing {
  id                    String    @id @default(cuid())
  title                 String
  company               String
  companyId             String?
  location              String
  locationId            String?
  salaryMin             Int?
  salaryMax             Int?
  salaryCurrency        String    @default("HKD")
  description           String    @db.Text
  requirements          String?   @db.Text
  benefits              String?   @db.Text
  applicationDeadline   DateTime?
  originalUrl           String
  sourcePortal          String
  sourcePortalId        String?
  jobCategory           String?
  jobCategoryId         String?
  employmentType        String?
  experienceLevel       String?
  remoteOption          RemoteOption @default(ONSITE)
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  lastScrapedAt         DateTime  @default(now())
  scrapedCount          Int       @default(1)
  contentHash           String
  viewCount             Int       @default(0)
  applicationCount      Int       @default(0)
  postedDate            DateTime?
  
  // Relations
  companyProfile        Company?  @relation(fields: [companyId], references: [id])
  locationData          Location? @relation(fields: [locationId], references: [id])
  portal                Portal?   @relation(fields: [sourcePortalId], references: [id])
  category              Category? @relation(fields: [jobCategoryId], references: [id])
  applications          JobApplication[]
  savedByUsers          SavedJob[]
  jobSkills             JobSkill[]
  jobLanguages          JobLanguage[]
  
  @@unique([contentHash])
  @@index([sourcePortal])
  @@index([isActive])
  @@index([companyId])
  @@index([locationId])
  @@index([jobCategoryId])
  @@index([salaryMin, salaryMax])
  @@index([postedDate])
  @@map("job_listings")
}

model Portal {
  id              String    @id @default(cuid())
  name            String    @unique
  displayName     String
  baseUrl         String
  isActive        Boolean   @default(true)
  lastScrapedAt   DateTime?
  config          Json?     // Scraper configuration
  
  jobListings     JobListing[]
  scrapingLogs    ScrapingLog[]
  
  @@map("portals")
}

model ScrapingLog {
  id              String    @id @default(cuid())
  portal          String
  portalId        String?
  status          String
  jobsScraped     Int       @default(0)
  jobsNew         Int       @default(0)
  jobsUpdated     Int       @default(0)
  errors          String[]
  duration        Int       // in seconds
  startedAt       DateTime
  completedAt     DateTime
  
  portalData      Portal?   @relation(fields: [portalId], references: [id])
  
  @@index([portal])
  @@index([status])
  @@index([startedAt])
  @@map("scraping_logs")
}

// ============ USER MANAGEMENT ============

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password              String
  name                  String
  isActive              Boolean   @default(true)
  emailVerified         Boolean   @default(false)
  emailVerificationToken String?
  resetPasswordToken    String?
  resetPasswordExpiry   DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  lastLoginAt           DateTime?
  
  // Relations
  profile               UserProfile?
  applications          JobApplication[]
  savedJobs             SavedJob[]
  savedSearches         SavedSearch[]
  documents             ApplicationDocument[]
  reminders             ApplicationReminder[]
  
  @@index([email])
  @@map("users")
}

model UserProfile {
  id                    String    @id @default(cuid())
  userId                String    @unique
  phone                 String?
  currentPosition       String?
  currentCompany        String?
  yearsOfExperience     Int?
  expectedSalaryMin     Int?
  expectedSalaryMax     Int?
  noticePeriod          String?   // e.g., "1 month", "2 weeks"
  availableFrom         DateTime?
  linkedin              String?
  github                String?
  portfolio             String?
  bio                   String?   @db.Text
  skills                String[]
  languages             String[]
  preferredLocations    String[]
  preferredJobTypes     String[]
  
  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

// ============ JOB APPLICATION TRACKING ============

model JobApplication {
  id                    String    @id @default(cuid())
  userId                String
  jobListingId          String
  status                ApplicationStatus @default(BOOKMARKED)
  statusHistory         ApplicationStatusHistory[]
  
  // Application details
  appliedVia            String?   // e.g., "Company Website", "JobsDB", "Email"
  applicationUrl        String?
  applicationEmail      String?
  coverLetter           String?   @db.Text
  customResume          Boolean   @default(false)
  resumeVersion         String?
  notes                 String?   @db.Text
  
  // Tracking
  bookmarkedAt          DateTime?
  appliedAt             DateTime?
  respondedAt           DateTime?
  
  // Company response
  companyResponse       String?   @db.Text
  rejectionReason       String?
  offerDetails          String?   @db.Text
  offerSalary           Int?
  offerDeadline         DateTime?
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobListing            JobListing @relation(fields: [jobListingId], references: [id])
  interviews            Interview[]
  documents             ApplicationDocument[]
  reminders             ApplicationReminder[]
  
  @@unique([userId, jobListingId])
  @@index([userId])
  @@index([jobListingId])
  @@index([status])
  @@map("job_applications")
}

model ApplicationStatusHistory {
  id                    String    @id @default(cuid())
  applicationId         String
  fromStatus            ApplicationStatus?
  toStatus              ApplicationStatus
  reason                String?
  createdAt             DateTime  @default(now())
  
  // Relations
  application           JobApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  
  @@index([applicationId])
  @@map("application_status_history")
}

// ============ INTERVIEW MANAGEMENT ============

model Interview {
  id                    String    @id @default(cuid())
  applicationId         String
  type                  InterviewType
  round                 Int       @default(1)
  status                InterviewStatus @default(SCHEDULED)
  
  // Schedule
  scheduledAt           DateTime
  duration              Int?      // in minutes
  location              String?
  locationDetails       String?   @db.Text
  isOnline              Boolean   @default(false)
  meetingUrl            String?
  
  // Interviewers
  interviewers          Interviewer[]
  
  // Preparation
  jobDescription        String?   @db.Text
  preparationNotes      String?   @db.Text
  questionsToAsk        String[]
  
  // Feedback
  interviewNotes        String?   @db.Text
  feedback              String?   @db.Text
  rating                Int?      // 1-5
  result                InterviewResult?
  nextSteps             String?   @db.Text
  
  // Metadata
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  completedAt           DateTime?
  
  // Relations
  application           JobApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  reminders             ApplicationReminder[]
  
  @@index([applicationId])
  @@index([scheduledAt])
  @@map("interviews")
}

model Interviewer {
  id                    String    @id @default(cuid())
  interviewId           String
  name                  String
  title                 String?
  email                 String?
  phone                 String?
  linkedin              String?
  notes                 String?   @db.Text
  
  // Relations
  interview             Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  
  @@map("interviewers")
}

// ============ DOCUMENT MANAGEMENT ============

model ApplicationDocument {
  id                    String    @id @default(cuid())
  userId                String
  applicationId         String?
  type                  DocumentType
  name                  String
  filename              String
  filePath              String
  fileSize              Int       // in bytes
  mimeType              String
  version               String?
  isActive              Boolean   @default(true)
  tags                  String[]
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  application           JobApplication? @relation(fields: [applicationId], references: [id])
  
  @@index([userId])
  @@index([applicationId])
  @@index([type])
  @@map("application_documents")
}

// ============ REMINDER SYSTEM ============

model ApplicationReminder {
  id                    String    @id @default(cuid())
  userId                String
  applicationId         String?
  interviewId           String?
  type                  ReminderType
  title                 String
  description           String?   @db.Text
  dueDate               DateTime
  isCompleted           Boolean   @default(false)
  completedAt           DateTime?
  isSnoozed             Boolean   @default(false)
  snoozedUntil          DateTime?
  emailSent             Boolean   @default(false)
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  application           JobApplication? @relation(fields: [applicationId], references: [id])
  interview             Interview? @relation(fields: [interviewId], references: [id])
  
  @@index([userId])
  @@index([dueDate])
  @@index([isCompleted])
  @@map("application_reminders")
}

// ============ SAVED SEARCHES & ALERTS ============

model SavedSearch {
  id                    String    @id @default(cuid())
  userId                String
  name                  String
  filters               Json      // Search criteria
  emailAlert            Boolean   @default(false)
  alertFrequency        AlertFrequency @default(DAILY)
  lastAlertSent         DateTime?
  isActive              Boolean   @default(true)
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("saved_searches")
}

model SavedJob {
  id                    String    @id @default(cuid())
  userId                String
  jobListingId          String
  notes                 String?   @db.Text
  savedAt               DateTime  @default(now())
  
  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobListing            JobListing @relation(fields: [jobListingId], references: [id])
  
  @@unique([userId, jobListingId])
  @@map("saved_jobs")
}

// ============ ENHANCED CATEGORIZATION ============

model Company {
  id                    String    @id @default(cuid())
  name                  String    @unique
  displayName           String
  logo                  String?
  website               String?
  description           String?   @db.Text
  industry              String?
  size                  CompanySize?
  foundedYear           Int?
  headquarters          String?
  isVerified            Boolean   @default(false)
  
  jobListings           JobListing[]
  
  @@index([name])
  @@map("companies")
}

model Location {
  id                    String    @id @default(cuid())
  name                  String
  nameZh                String?   // Chinese name
  type                  LocationType
  parentId              String?
  latitude              Float?
  longitude             Float?
  
  // Self-relation for hierarchy
  parent                Location? @relation("LocationHierarchy", fields: [parentId], references: [id])
  children              Location[] @relation("LocationHierarchy")
  
  jobListings           JobListing[]
  
  @@index([parentId])
  @@map("locations")
}

model Category {
  id                    String    @id @default(cuid())
  name                  String
  nameZh                String?   // Chinese name
  slug                  String    @unique
  parentId              String?
  level                 Int       @default(0)
  isActive              Boolean   @default(true)
  
  // Self-relation for hierarchy
  parent                Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children              Category[] @relation("CategoryHierarchy")
  
  jobListings           JobListing[]
  
  @@index([parentId])
  @@index([slug])
  @@map("categories")
}

model Skill {
  id                    String    @id @default(cuid())
  name                  String    @unique
  category              String
  isPopular             Boolean   @default(false)
  
  jobSkills             JobSkill[]
  
  @@map("skills")
}

model JobSkill {
  id                    String    @id @default(cuid())
  jobListingId          String
  skillId               String
  level                 SkillLevel @default(REQUIRED)
  
  // Relations
  jobListing            JobListing @relation(fields: [jobListingId], references: [id], onDelete: Cascade)
  skill                 Skill @relation(fields: [skillId], references: [id])
  
  @@unique([jobListingId, skillId])
  @@map("job_skills")
}

model Language {
  id                    String    @id @default(cuid())
  code                  String    @unique // ISO 639-1 code
  name                  String
  nameZh                String?
  
  jobLanguages          JobLanguage[]
  
  @@map("languages")
}

model JobLanguage {
  id                    String    @id @default(cuid())
  jobListingId          String
  languageId            String
  proficiency           LanguageProficiency @default(PROFESSIONAL)
  
  // Relations
  jobListing            JobListing @relation(fields: [jobListingId], references: [id], onDelete: Cascade)
  language              Language @relation(fields: [languageId], references: [id])
  
  @@unique([jobListingId, languageId])
  @@map("job_languages")
}

// ============ ENUMS ============

enum ApplicationStatus {
  BOOKMARKED
  PREPARING
  APPLIED
  APPLIED_EXTERNAL
  IN_REVIEW
  ASSESSMENT
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  REFERENCE_CHECK
  OFFER_RECEIVED
  NEGOTIATING
  ACCEPTED
  REJECTED
  WITHDRAWN
  NOT_SELECTED
}

enum InterviewType {
  PHONE_SCREENING
  VIDEO_INTERVIEW
  ONSITE_INTERVIEW
  TECHNICAL_INTERVIEW
  BEHAVIORAL_INTERVIEW
  CASE_STUDY
  PANEL_INTERVIEW
  FINAL_INTERVIEW
  HR_INTERVIEW
  INFORMAL_CHAT
}

enum InterviewStatus {
  SCHEDULED
  RESCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum InterviewResult {
  PASSED
  FAILED
  PENDING
  WAITLISTED
}

enum DocumentType {
  RESUME
  COVER_LETTER
  PORTFOLIO
  CERTIFICATE
  REFERENCE
  OTHER
}

enum ReminderType {
  APPLICATION_DEADLINE
  FOLLOW_UP
  INTERVIEW_PREP
  INTERVIEW_DAY
  THANK_YOU_NOTE
  DECISION_DEADLINE
  DOCUMENT_SUBMISSION
  CUSTOM
}

enum AlertFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
  MONTHLY
}

enum RemoteOption {
  ONSITE
  REMOTE
  HYBRID
  FLEXIBLE
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum LocationType {
  COUNTRY
  REGION
  DISTRICT
  AREA
}

enum SkillLevel {
  REQUIRED
  PREFERRED
  NICE_TO_HAVE
}

enum LanguageProficiency {
  NATIVE
  FLUENT
  PROFESSIONAL
  CONVERSATIONAL
  BASIC
}