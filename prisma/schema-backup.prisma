// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// COMPANY & ORGANIZATION
// ============================================

model Company {
  id                String   @id @default(cuid())
  name              String
  displayName       String?  // For different language versions
  description       String?
  website           String?
  logoUrl           String?
  
  // Company details
  industry          String?
  companySize       CompanySize?
  foundedYear       Int?
  headquarters      String?
  
  // Additional info
  linkedinUrl       String?
  glassdoorUrl      String?
  
  // Metadata
  isVerified        Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  jobListings       JobListing[]
  locations         CompanyLocation[]
  
  @@index([name])
  @@index([industry])
  @@map("companies")
}

model CompanyLocation {
  id            String   @id @default(cuid())
  companyId     String
  locationId    String
  isHeadquarter Boolean  @default(false)
  
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location      Location @relation(fields: [locationId], references: [id])
  
  @@unique([companyId, locationId])
  @@map("company_locations")
}

enum CompanySize {
  STARTUP_1_10
  SMALL_11_50
  MEDIUM_51_200
  LARGE_201_500
  ENTERPRISE_501_1000
  CORPORATE_1000_PLUS
}

// ============================================
// LOCATION HIERARCHY
// ============================================

model Location {
  id            String   @id @default(cuid())
  name          String
  nameZh        String?  // Chinese name
  type          LocationType
  parentId      String?
  
  // Geo data
  latitude      Float?
  longitude     Float?
  
  // Relations
  parent        Location?  @relation("LocationHierarchy", fields: [parentId], references: [id])
  children      Location[] @relation("LocationHierarchy")
  jobListings   JobListing[]
  companies     CompanyLocation[]
  
  @@index([name])
  @@index([type])
  @@index([parentId])
  @@map("locations")
}

enum LocationType {
  COUNTRY
  REGION     // e.g., Hong Kong Island, Kowloon, New Territories
  DISTRICT   // e.g., Central, Wan Chai, Tsim Sha Tsui
  AREA       // More specific areas within districts
}

// ============================================
// JOB LISTINGS
// ============================================

model JobListing {
  id                String   @id @default(cuid())
  
  // Basic info
  title             String
  titleZh           String?  // Chinese title
  companyId         String
  locationId        String
  remoteType        RemoteType @default(ONSITE)
  
  // Salary information
  salaryMin         Int?
  salaryMax         Int?
  salaryCurrency    String   @default("HKD")
  salaryPeriod      SalaryPeriod @default(MONTHLY)
  showSalary        Boolean  @default(true)
  
  // Job details
  description       String
  descriptionZh     String?
  responsibilities  String?
  qualifications    String?
  preferredSkills   String?
  benefits          String?
  
  // Employment details
  employmentType    EmploymentType
  experienceLevel   ExperienceLevel
  educationLevel    EducationLevel?
  
  // Application info
  applicationDeadline DateTime?
  applicationEmail    String?
  applicationUrl      String?
  applicationMethod   ApplicationMethod @default(EXTERNAL)
  
  // Work arrangements
  workSchedule      String?  // e.g., "9-6", "Flexible hours"
  overtimeRequired  Boolean  @default(false)
  travelRequired    String?  // e.g., "10%", "Occasional", "None"
  
  // Source info
  originalUrl       String   @unique
  sourcePortal      String
  externalId        String?  // Portal's job ID
  
  // Status
  isActive          Boolean  @default(true)
  isFeatured        Boolean  @default(false)
  isUrgent          Boolean  @default(false)
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastScrapedAt     DateTime @default(now())
  publishedAt       DateTime @default(now())
  scrapedCount      Int      @default(1)
  viewCount         Int      @default(0)
  applicationCount  Int      @default(0)
  
  // For deduplication
  contentHash       String   @unique
  
  // Relations
  company           Company    @relation(fields: [companyId], references: [id])
  location          Location   @relation(fields: [locationId], references: [id])
  
  skills            JobSkill[]
  languages         JobLanguage[]
  categories        JobCategory[]
  industries        JobIndustry[]
  applications      Application[]
  savedJobs         SavedJob[]
  
  @@index([companyId])
  @@index([locationId])
  @@index([sourcePortal])
  @@index([employmentType])
  @@index([experienceLevel])
  @@index([remoteType])
  @@index([createdAt])
  @@index([publishedAt])
  @@index([applicationDeadline])
  @@index([isActive])
  @@index([contentHash])
  @@index([salaryMin])
  @@index([salaryMax])
  @@map("job_listings")
}

enum RemoteType {
  ONSITE
  REMOTE
  HYBRID
  FLEXIBLE
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  INTERNSHIP
  FREELANCE
  VOLUNTEER
}

enum ExperienceLevel {
  ENTRY
  JUNIOR
  MID
  SENIOR
  LEAD
  MANAGER
  DIRECTOR
  EXECUTIVE
}

enum EducationLevel {
  HIGH_SCHOOL
  ASSOCIATE
  BACHELOR
  MASTER
  DOCTORATE
  PROFESSIONAL
  NONE_REQUIRED
}

enum SalaryPeriod {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ApplicationMethod {
  INTERNAL   // Apply through our platform
  EXTERNAL   // Redirect to company website
  EMAIL      // Apply via email
}

// ============================================
// SKILLS & REQUIREMENTS
// ============================================

model Skill {
  id            String   @id @default(cuid())
  name          String   @unique
  nameZh        String?
  category      String?  // e.g., "Programming", "Language", "Soft Skills"
  isVerified    Boolean  @default(false)
  
  jobs          JobSkill[]
  
  @@index([category])
  @@map("skills")
}

model JobSkill {
  id            String   @id @default(cuid())
  jobId         String
  skillId       String
  isRequired    Boolean  @default(true)
  level         SkillLevel?
  
  job           JobListing @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill         Skill      @relation(fields: [skillId], references: [id])
  
  @@unique([jobId, skillId])
  @@map("job_skills")
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

// ============================================
// LANGUAGES
// ============================================

model Language {
  id            String   @id @default(cuid())
  code          String   @unique // ISO 639-1 code
  name          String
  nameZh        String?
  
  jobs          JobLanguage[]
  
  @@map("languages")
}

model JobLanguage {
  id            String   @id @default(cuid())
  jobId         String
  languageId    String
  proficiency   LanguageProficiency
  isRequired    Boolean  @default(true)
  
  job           JobListing @relation(fields: [jobId], references: [id], onDelete: Cascade)
  language      Language   @relation(fields: [languageId], references: [id])
  
  @@unique([jobId, languageId])
  @@map("job_languages")
}

enum LanguageProficiency {
  BASIC
  CONVERSATIONAL
  PROFESSIONAL
  NATIVE
}

// ============================================
// CATEGORIZATION
// ============================================

model Category {
  id            String   @id @default(cuid())
  name          String   @unique
  nameZh        String?
  slug          String   @unique
  parentId      String?
  description   String?
  iconUrl       String?
  
  parent        Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[]    @relation("CategoryHierarchy")
  jobs          JobCategory[]
  
  @@index([slug])
  @@index([parentId])
  @@map("categories")
}

model JobCategory {
  id            String   @id @default(cuid())
  jobId         String
  categoryId    String
  isPrimary     Boolean  @default(false)
  
  job           JobListing @relation(fields: [jobId], references: [id], onDelete: Cascade)
  category      Category   @relation(fields: [categoryId], references: [id])
  
  @@unique([jobId, categoryId])
  @@map("job_categories")
}

model Industry {
  id            String   @id @default(cuid())
  name          String   @unique
  nameZh        String?
  code          String   @unique // Industry code (e.g., NAICS)
  
  jobs          JobIndustry[]
  
  @@map("industries")
}

model JobIndustry {
  id            String   @id @default(cuid())
  jobId         String
  industryId    String
  
  job           JobListing @relation(fields: [jobId], references: [id], onDelete: Cascade)
  industry      Industry   @relation(fields: [industryId], references: [id])
  
  @@unique([jobId, industryId])
  @@map("job_industries")
}

// ============================================
// APPLICATION TRACKING
// ============================================

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String?
  phone             String?
  
  // Profile
  resumeUrl         String?
  linkedinUrl       String?
  portfolioUrl      String?
  
  // Preferences
  preferredLocations String?  // JSON array of location IDs
  preferredCategories String? // JSON array of category IDs
  minSalary         Int?
  
  // Metadata
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  applications      Application[]
  savedJobs         SavedJob[]
  searches          SavedSearch[]
  alerts            JobAlert[]
  
  @@map("users")
}

model Application {
  id                String   @id @default(cuid())
  userId            String
  jobId             String
  
  // Application details
  coverLetter       String?
  resumeVersion     String?  // Track which resume was used
  status            ApplicationStatus @default(SUBMITTED)
  
  // Tracking
  submittedAt       DateTime @default(now())
  viewedAt          DateTime?
  respondedAt       DateTime?
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job               JobListing @relation(fields: [jobId], references: [id])
  
  @@unique([userId, jobId])
  @@index([status])
  @@index([submittedAt])
  @@map("applications")
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  VIEWED
  SHORTLISTED
  INTERVIEW_SCHEDULED
  INTERVIEWED
  OFFERED
  REJECTED
  WITHDRAWN
}

model SavedJob {
  id            String   @id @default(cuid())
  userId        String
  jobId         String
  notes         String?
  savedAt       DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job           JobListing @relation(fields: [jobId], references: [id])
  
  @@unique([userId, jobId])
  @@map("saved_jobs")
}

// ============================================
// SEARCH & ALERTS
// ============================================

model SavedSearch {
  id            String   @id @default(cuid())
  userId        String
  name          String
  query         String   // JSON with search parameters
  createdAt     DateTime @default(now())
  lastUsedAt    DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("saved_searches")
}

model JobAlert {
  id            String   @id @default(cuid())
  userId        String
  name          String
  criteria      String   // JSON with alert criteria
  frequency     AlertFrequency
  isActive      Boolean  @default(true)
  lastSentAt    DateTime?
  createdAt     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("job_alerts")
}

enum AlertFrequency {
  INSTANT
  DAILY
  WEEKLY
  MONTHLY
}

// ============================================
// ANALYTICS & STATISTICS
// ============================================

model SalaryStatistic {
  id                String   @id @default(cuid())
  
  // Dimensions
  categoryId        String?
  locationId        String?
  experienceLevel   ExperienceLevel?
  companySize       CompanySize?
  period            String   // e.g., "2024-Q1"
  
  // Statistics
  count             Int
  minSalary         Int
  maxSalary         Int
  avgSalary         Float
  medianSalary      Float
  percentile25      Float
  percentile75      Float
  
  // Metadata
  calculatedAt      DateTime @default(now())
  
  @@unique([categoryId, locationId, experienceLevel, companySize, period])
  @@index([period])
  @@map("salary_statistics")
}

model JobMarketTrend {
  id            String   @id @default(cuid())
  
  // Dimensions
  type          TrendType
  entityId      String?  // ID of category, skill, location, etc.
  entityName    String
  period        String   // e.g., "2024-01"
  
  // Metrics
  jobCount      Int
  growthRate    Float?   // Compared to previous period
  demandScore   Float?   // Normalized demand score
  
  createdAt     DateTime @default(now())
  
  @@unique([type, entityId, period])
  @@index([type])
  @@index([period])
  @@map("job_market_trends")
}

enum TrendType {
  CATEGORY
  SKILL
  LOCATION
  INDUSTRY
  COMPANY
}

// ============================================
// SCRAPING & PORTAL MANAGEMENT
// ============================================

model Portal {
  id            String   @id @default(cuid())
  name          String   @unique
  baseUrl       String
  isActive      Boolean  @default(true)
  
  // Scraping configuration
  scrapingConfig String?  // JSON configuration
  selectors     String?  // CSS/XPath selectors as JSON
  rateLimit     Int      @default(1000) // ms between requests
  
  // Statistics
  lastScraped   DateTime?
  totalJobs     Int      @default(0)
  successRate   Float    @default(100)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  logs          ScrapingLog[]
  
  @@map("portals")
}

model ScrapingLog {
  id            String   @id @default(cuid())
  portalId      String
  status        ScrapingStatus
  
  // Metrics
  jobsScraped   Int      @default(0)
  jobsNew       Int      @default(0)
  jobsUpdated   Int      @default(0)
  jobsError     Int      @default(0)
  
  // Error tracking
  errors        String?  // JSON array of errors
  errorMessage  String?
  
  // Timing
  startTime     DateTime
  endTime       DateTime?
  duration      Int?     // in seconds
  
  createdAt     DateTime @default(now())
  
  portal        Portal   @relation(fields: [portalId], references: [id])
  
  @@index([portalId])
  @@index([status])
  @@index([createdAt])
  @@map("scraping_logs")
}

enum ScrapingStatus {
  RUNNING
  SUCCESS
  PARTIAL_SUCCESS
  ERROR
  TIMEOUT
}

// ============================================
// MIGRATION & SYSTEM
// ============================================

model MigrationLog {
  id            String   @id @default(cuid())
  version       String   @unique
  name          String
  appliedAt     DateTime @default(now())
  executionTime Int      // in milliseconds
  success       Boolean
  error         String?
  
  @@map("migration_logs")
}